// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PostType {
  PHOTO
  QUOTE
}

// Social Media
model User {
  id                  Int        @id @default(autoincrement())
  username            String     @unique
  password            String
  email               String     @unique
  avatar              String
  first_name          String
  last_name           String
  date_of_birth       DateTime   @db.Date
  tagline             String?
  role                Role       @default(USER)
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  posts               Post[]
  likes               Like[]
  comments            Comment[]
  friends             Friend[]   @relation("friends")
  pending_friends     Friend[]   @relation("pending_friends")
  created_time_bombs  TimeBomb[] @relation("author")
  received_time_bombs TimeBomb[] @relation("recipient")

  @@index([username])
  @@index([email])
  @@index([created_at])
  @@map(name: "users")
}

model Friend {
  id          Int       @id @default(autoincrement())
  user_id     Int
  user        User      @relation("friends", fields: [user_id], references: [id])
  friend_id   Int
  friend      User      @relation("pending_friends", fields: [friend_id], references: [id])
  approved    Boolean   @default(false)
  approved_at DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@index([user_id])
  @@index([friend_id])
  @@map(name: "friends")
}

model Post {
  id          Int       @id @default(autoincrement())
  author_id   Int
  author      User      @relation(fields: [author_id], references: [id])
  type        PostType
  content     Json
  description String?
  tags        String[]
  likes       Like[]
  comments    Comment[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  @@index([author_id])
  @@index([created_at])
  @@map(name: "posts")
}

model Like {
  id         Int      @id @default(autoincrement())
  author_id    Int
  author       User     @relation(fields: [author_id], references: [id])
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  @@index([author_id])
  @@index([post_id])
  @@map(name: "likes")
}

model Comment {
  id         Int       @id @default(autoincrement())
  author_id    Int
  author       User      @relation(fields: [author_id], references: [id])
  post_id    Int
  post       Post      @relation(fields: [post_id], references: [id])
  message    String
  reply_to   Int?
  parent     Comment?  @relation("replies", fields: [reply_to], references: [id])
  replies    Comment[] @relation("replies")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@index([author_id])
  @@index([post_id])
  @@map(name: "comments")
}

model TimeBomb {
  id           Int      @id @default(autoincrement())
  author_id    Int
  author       User     @relation("author", fields: [author_id], references: [id])
  recipient_id Int
  recipient    User     @relation("recipient", fields: [recipient_id], references: [id])
  content      Json
  visible_at   DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@index([author_id])
  @@index([recipient_id])
  @@index([visible_at])
  @@map(name: "time_bombs")
}

// Render Pipeline
